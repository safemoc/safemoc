# 计算机5部分：
# 控制部分：CPU
# 运算部分： CPU|GPU
# 存储部分：内存(Memory) | 外存-硬盘
# 输入设备：Input
# 输出设备：Output
## I/O ： 就是我们常说的 输入输出

# 操作系统：
# 计算机说到底 就是一堆零件 这些零件收到软件的支配 如果我们要实现 一个视频的播放，应该是软件去控制硬件实现播放
# 第一步就是要有一个最基础的控制程序
# 第二步就是 软件 调用控制程序，控制程序调用计算机硬件
# 软件就是 应用程序
# 控制程序十分复杂，需要十分深厚的计算机底层逻辑理念，如果仅仅是为了播放一个视频，就苦学数十载才完成第一步，成本太大
# 所以 站在巨人的肩膀上， 现在的操作系统 就是控制程序
# 操作系统 是集成 计算机的各种部分，使其达成协作 的 控制程序


# 跨平台：
# 跨平台就是在不同的操作系统上控制计算机的硬件
# 不同的操作系统，会有相同的地方，也会有不同的地方
# 不同的地方，我们应该使用不同的方法实现相同的效果，但是Python支持跨平台
# 就是在不同的平台上，相同的代码，可以实现相同的效果。
# 不会因为操作系统的特性，导致无法达到想要的效果

#x86-32 与 x86-64
# inter 第一款cpu 型号为 80285 随后是 80386 后来这种架构或型号 统一成为 x86
# 计算机 只能识别 高电频（1）与低电频（0） 与人的大脑的神经系统有部分类似，神经系统接收生物电
# 所以数据 就是 一堆二进制  64是指每次从内存里取出64个二进制数作为一个指令   32则是取出32位作为一个指令
# cpu 具有向下兼容 可以理解为 64是有64个停车位 同时进入 64个 或32 个都不会有问题 可是如果你的停车场是32的同时进入64个就会出现问题


# 因为计算机是基于电工作的，如果可以直接编写 01这种二进制指令工作效率是最高的
# 可是因为过于复杂，开发效率极低，需要很久才能实现一个 极小的功能
# 汇编语言
# 使用英文标签 实现指令的，由于依旧复杂 开发效率低

# 高级语言 ： 在人类的角度，用人类的字符实现编写程序
# 高级语言分为两种，一种是编译型语言：c
#                     解释性语言：Python
# 编程就是 人类控制计算机 让计算机实现特定步骤
# Python是一种编程语言，也就是 人类与计算机沟通的语言
# 编译型语言：将代码翻译为计算机可识别的机器语言，因此编译后的代码可以脱离其环境独立执行 执行效率高-开发效率低
# 一旦要修改代码，需要修改源代码，从新编译才能生效，并且编译型代码是针对平台使用的，无法实现跨平台，因此跨平台性很差
# 解释性语言：将代码通过解释器 一段一段翻译为机器语言并执行，因此执行效率被解释器拖慢
# 开发效率高，直接修改源代码就好，根据不同平台有不同的解释器，所以跨平台性也很好
# 执行效率：
#    机器语言> 汇编语言>高级语言(编译型>解释型)
# 开发效率:
#    机器语言< 汇编语言<高级语言(编译型<解释性)
# 跨平台性: 解释型语言跨平台性极强
# 因为现在主流的程序都是基于网络通信的,执行效率再高也会被网络延迟拖慢 所以主要考虑开发效率和跨平台性
# 由于Python 简单易学 跨平台性极强,且类库丰富,所以我们学Python!!!
